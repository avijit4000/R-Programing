print("Avijit")
5+6
5+6
print("Avijit")
print("Avijit")
5+6
print("Avijit")
5+6
sum1<-56+78
print(sum1)
sum1<-56+78
print(sum1)
print(c)
c=85+88
print(c)
library(stats4, lib.loc = "C:/Program Files/R/R-4.2.2/library")
install.packages("ggplot.multistats")
prop.test(x=481,n=1000,p=0.5, alternative ="greater" )
?prop.test()
lan={ }
t.test()
college <- read.csv("College.csv")
college <- read.csv("College.csv")
rownames(college) <- college[,1]
college <- college[,-1]
summary(college)
max(5, 10, 15)
min(5, 10, 15)
sqrt(16)
abs(-4.7)
ceiling(1.4)
floor(1.4)
str <- "Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua."
str # print the value of str
str <- "Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua."
cat(str)
str <- "Hello World!"
nchar(str)
grepl("H", str)
grepl("Hello", str)
grepl("X", str)
str1 <- "Hello"
str2 <- "World"
paste(str1, str2)
str <- "We are the so-called "Vikings", from the north."
str <- "We are the so-called "Vikings", from the north."
str
str <- "We are the so-called \"Vikings\", from the north."
str
str
cat(str)
str <- "We are the so-called \n "Vikings\", from the north."
str <- "We are the so-called \ "Vikings\", from the north."
str <- "We are the so-called \\ "Vikings\", from the north."
str <- "We are the so-called \"Vikings\", from the north."
str
cat(str)
str <- "We are the so-called \n"Vikings\", from the north."
str <- "We are the so-called \n" Vikings\", from the north."
str <- "We are the so-called \n":5
10 > 9    # TRUE because 10 is greater than 9
10 == 9   # FALSE because 10 is not equal to 9
10 < 9    # FALSE because 10 is greater than 9
a <- 10
b <- 9
a > b
a <- 10
b <- 9
a > b
a<-5
b<-10
if (b>a){
print("b is ok")
}
else{
a<-5
b<-10
if (b>a){
print("b is ok")
}
else{
a <- 200
b <- 33
if (b > a) {
print ("b is greater than a")
} else {
print("b is not greater than a")
}
a <- 200
b <- 33
if (b > a){print ("b is greater than a")}
else {print("b is not greater than a")}
a <- 200
b <- 33
if (b > a) {
print ("b is greater than a")
} else {
print("b is not greater than a")
}
a <- 200
b <- 33
if (b > a) {
print ("b is greater than a")
} else {
print("b is not greater than a")
}
a<-5
b<-10
if (b>a){
print("b is ok")
}
else{
a<-5
b<-10
if (b>a){
print("b is ok")
}else{
print("b is not greater")
}
my_var <- 3
my_var <<- 3
3 -> my_var
3 ->> my_var
my_var # print my_var
a <- 200
b <- 33
c <- 500
if (a > b & c > a) {
print("Both conditions are true")
}
a <- 200
b <- 33
c <- 500
if (a > b | a > c) {
print("At least one of the conditions is true")
}
i<- 1
while (i<6)  {
print(i)
i<-i+1
}
i <- 1
while (i < 6) {
print(i)
i <- i + 1
if (i == 4) {
break
}
}
i <- 0
while (i < 6) {
i <- i + 1
if (i == 3) {
next
}
print(i)
}
dice <- 1
while (dice <= 6) {
if (dice < 6) {
print("No Yahtzee")
} else {
print("Yahtzee!")
}
dice <- dice + 1
}
fruits <- list("apple", "banana", "cherry")
for (x in fruits) {
if (x == "banana") {
next
}
print(x)
}
dice <- 1:6
for(x in dice) {
if (x == 6) {
print(paste("The dice number is", x, "Yahtzee!"))
} else {
print(paste("The dice number is", x, "Not Yahtzee"))
}
}
adj <- list("red", "big", "tasty")
fruits <- list("apple", "banana", "cherry")
for (x in adj) {
for (y in fruits) {
print(paste(x, y))
}
}
my_function <- function() {
print("Hello World!")
}
my_function()
my_function <- function(fname) {
paste(fname, "Griffin")
}
my_function("Peter")
my_function("Lois")
my_function("Stewie")
my_function <- function() {
txt <<- "fantastic"
paste("R is", txt)
}
my_function()
print(txt)
my_function <- function(fname, lname) {
paste(fname, lname)
}
my_function("Peter")
my_function("Sweden")
my_function <- function(x) {
return (5 * x)
}
print(my_function(3))
print(my_function(5))
print(my_function(9))
name
name <-["Avijit","rahul","mnop", "qrst","uvwx", "yzab"]
name <-list("Avijit","rahul","mnop", "qrst","uvwx", "yzab")
age <- list(25,63,96,66,36,37)
name
age
q()
setwd("D:/Pyn/Test_work/R")
setwd("~/")
setwd("D:/Pyn/Test_work/R")
n1 <- 15  # Double precision by default
n1
typeof(n1)
n2 <- 1.5
n2
typeof(n2)
n1 <- 15  # Double precision by default
n1
typeof(n1)
n2 <- 1.5
n2
typeof(n2)
c1 <- "c"
c1
typeof(c1)
c2 <- "a string of text"
c2
typeof(c2)
l1 <- TRUE
l1
typeof(l1)
l2 <- F
l2
typeof(l2)
v1 <- c(1, 2, 3, 4, 5)
v1
is.vector(v1)
v2 <- c("a", "b", "c")
v2
is.vector(v2)
v2 <- c("a", "b", "c")
v2
is.vector(v2)
v3 <- c(TRUE, TRUE, FALSE, FALSE, TRUE)
v3
is.vector(v3)
m1 <- matrix(c(T, T, F, F, T, F), nrow = 2)
m1
m2 <- matrix(c("a", "b",
"c", "d"),
nrow = 2,
byrow = T)
m2
# Give data, then dimemensions (rows, columns, tables)
a1 <- array(c( 1:24), c(4, 3, 2))
a1
vNumeric   <- c(1, 2, 3)
vCharacter <- c("a", "b", "c")
vLogical   <- c(T, F, T)
dfa <- cbind(vNumeric, vCharacter, vLogical)
dfa  # Matrix of one data type
df <- as.data.frame(cbind(vNumeric, vCharacter, vLogical))
df  # Makes a data frame with three different data types
o1 <- c(1, 2, 3)
o2 <- c("a", "b", "c", "d")
o3 <- c(T, F, T, T, F)
list1 <- list(o1, o2, o3)
list1
list2 <- list(o1, o2, o3, list1)  # Lists within lists!
list2
(coerce1 <- c(1, "b", TRUE))
# coerce1  # Parenthese around command above make this moot
typeof(coerce1)
(coerce2 <- 5)
typeof(coerce2)
(coerce3 <- as.integer(5))
typeof(coerce3)
(coerce4 <- c("1", "2", "3"))
typeof(coerce4)
(coerce5 <- as.numeric(c("1", "2", "3")))
typeof(coerce5)
(coerce6 <- matrix(1:9, nrow= 3))
is.matrix(coerce6)
(coerce7 <- as.data.frame(matrix(1:9, nrow= 3)))
is.data.frame(coerce7)
# Clear environment
rm(list = ls())
# Clear console
cat("\014")  # ctrl+L
# Clear mind :)
# Clear mind :)
# Clear environment
rm(list = ls())
# Clear console
cat("\014")  # ctrl+L
(coerce7 <- as.data.frame(matrix(1:9, nrow= 3)))
is.data.frame(coerce7)
# Clear environment
rm(list = ls())
# Clear console
cat("\014")  # ctrl+L
load("D:/Pyn/Test_work/R/.RData")
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, psych, rio, tidyverse)
# Clear environment
rm(list = ls())
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, psych, rio, tidyverse)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
library(datasets)
?mtcars
head(mtcars)
barplot(mtcars$cyl)             # Doesn't work
# Need a table with frequencies for each category
cylinders <- table(mtcars$cyl)  # Create table
barplot(cylinders)              # Bar chart
plot(cylinders)                 # Default X-Y plot (lines)
?mtcars
head(mtcars)
barplot(mtcars$cyl)             # Doesn't work
# Need a table with frequencies for each category
cylinders <- table(mtcars$cyl)  # Create table
barplot(cylinders)              # Bar chart
plot(cylinders)                 # Default X-Y plot (lines)
# Clear environment
rm(list = ls())
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, psych)
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, psych, rio, tidyverse)
library(datasets)
?mtcars
head(mtcars)
barplot(mtcars$cyl)             # Doesn't work
# Need a table with frequencies for each category
cylinders <- table(mtcars$cyl)  # Create table
barplot(cylinders)              # Bar chart
plot(cylinders)                 # Default X-Y plot (lines)
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, psych, rio, tidyverse)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
library(datasets)  # Load base packages manually
# Installs pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, psych)
head(iris)
# Get info on package
p_help(psych)           # Opens package PDF in browser
describe(iris$Sepal.Length)  # One quantitative variable
describe(iris)               # Entire data frame
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)   # For base
# Clear console
cat("\014")  # ctrl+L
setwd("D:/Pyn/MSDSM/Semester_3/PAR")
# Simple Linear Regression
# Importing the dataset
dataset = read.csv('salary.csv')
