print("Avijit")
5+6
5+6
print("Avijit")
print("Avijit")
5+6
print("Avijit")
5+6
sum1<-56+78
print(sum1)
sum1<-56+78
print(sum1)
print(c)
c=85+88
print(c)
library(stats4, lib.loc = "C:/Program Files/R/R-4.2.2/library")
install.packages("ggplot.multistats")
prop.test(x=481,n=1000,p=0.5, alternative ="greater" )
?prop.test()
lan={ }
t.test()
college <- read.csv("College.csv")
college <- read.csv("College.csv")
rownames(college) <- college[,1]
college <- college[,-1]
summary(college)
max(5, 10, 15)
min(5, 10, 15)
sqrt(16)
abs(-4.7)
ceiling(1.4)
floor(1.4)
str <- "Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua."
str # print the value of str
str <- "Lorem ipsum dolor sit amet,
consectetur adipiscing elit,
sed do eiusmod tempor incididunt
ut labore et dolore magna aliqua."
cat(str)
str <- "Hello World!"
nchar(str)
grepl("H", str)
grepl("Hello", str)
grepl("X", str)
str1 <- "Hello"
str2 <- "World"
paste(str1, str2)
str <- "We are the so-called "Vikings", from the north."
str <- "We are the so-called "Vikings", from the north."
str
str <- "We are the so-called \"Vikings\", from the north."
str
str
cat(str)
str <- "We are the so-called \n "Vikings\", from the north."
str <- "We are the so-called \ "Vikings\", from the north."
str <- "We are the so-called \\ "Vikings\", from the north."
str <- "We are the so-called \"Vikings\", from the north."
str
cat(str)
str <- "We are the so-called \n"Vikings\", from the north."
str <- "We are the so-called \n" Vikings\", from the north."
str <- "We are the so-called \n":5
10 > 9    # TRUE because 10 is greater than 9
10 == 9   # FALSE because 10 is not equal to 9
10 < 9    # FALSE because 10 is greater than 9
a <- 10
b <- 9
a > b
a <- 10
b <- 9
a > b
a<-5
b<-10
if (b>a){
print("b is ok")
}
else{
a<-5
b<-10
if (b>a){
print("b is ok")
}
else{
a <- 200
b <- 33
if (b > a) {
print ("b is greater than a")
} else {
print("b is not greater than a")
}
a <- 200
b <- 33
if (b > a){print ("b is greater than a")}
else {print("b is not greater than a")}
a <- 200
b <- 33
if (b > a) {
print ("b is greater than a")
} else {
print("b is not greater than a")
}
a <- 200
b <- 33
if (b > a) {
print ("b is greater than a")
} else {
print("b is not greater than a")
}
a<-5
b<-10
if (b>a){
print("b is ok")
}
else{
a<-5
b<-10
if (b>a){
print("b is ok")
}else{
print("b is not greater")
}
my_var <- 3
my_var <<- 3
3 -> my_var
3 ->> my_var
my_var # print my_var
a <- 200
b <- 33
c <- 500
if (a > b & c > a) {
print("Both conditions are true")
}
a <- 200
b <- 33
c <- 500
if (a > b | a > c) {
print("At least one of the conditions is true")
}
i<- 1
while (i<6)  {
print(i)
i<-i+1
}
i <- 1
while (i < 6) {
print(i)
i <- i + 1
if (i == 4) {
break
}
}
i <- 0
while (i < 6) {
i <- i + 1
if (i == 3) {
next
}
print(i)
}
dice <- 1
while (dice <= 6) {
if (dice < 6) {
print("No Yahtzee")
} else {
print("Yahtzee!")
}
dice <- dice + 1
}
fruits <- list("apple", "banana", "cherry")
for (x in fruits) {
if (x == "banana") {
next
}
print(x)
}
dice <- 1:6
for(x in dice) {
if (x == 6) {
print(paste("The dice number is", x, "Yahtzee!"))
} else {
print(paste("The dice number is", x, "Not Yahtzee"))
}
}
adj <- list("red", "big", "tasty")
fruits <- list("apple", "banana", "cherry")
for (x in adj) {
for (y in fruits) {
print(paste(x, y))
}
}
my_function <- function() {
print("Hello World!")
}
my_function()
my_function <- function(fname) {
paste(fname, "Griffin")
}
my_function("Peter")
my_function("Lois")
my_function("Stewie")
my_function <- function() {
txt <<- "fantastic"
paste("R is", txt)
}
my_function()
print(txt)
my_function <- function(fname, lname) {
paste(fname, lname)
}
my_function("Peter")
my_function("Sweden")
my_function <- function(x) {
return (5 * x)
}
print(my_function(3))
print(my_function(5))
print(my_function(9))
setwd("D:/Pyn/MSDSM/Semester_3/PAR/assignment_7")
# Fit a linear model
model <- lm(mpg ~ wt + hp, data = mtcars)
# Get the summary of the model
summary(model)
mtcars
# Get the summary of the model
summary(model)
data<-read.csv("VM_traindata.csv")
data
data
model <- lm(Relative Strength in the segments ~ Sales Value - $Mn + Profit % + Joint Bid - WSES Portion, data = data)
model <- lm(Relative.Strength.in.the.segment ~ Sales.Value....Mn + Profit.. + Joint.Bid...WSES.Portion, data = data)
summary(model)
# Assuming `Relative.Strength.in.the.segment` is converted to a binary variable
data$Win <- ifelse(data$Relative.Strength.in.the.segment > threshold, 1, 0)
(
summary(model)
model <- lm(Relative.Strength.in.the.segment ~ Sales.Value....Mn + Profit.. + Joint.Bid...WSES.Portion, data = data)
data<-read.csv("VM_traindata.csv")
data
model <- lm(Relative.Strength.in.the.segment ~ Sales.Value....Mn + Profit.. + Joint.Bid...WSES.Portion, data = data)
summary(model)
# Assuming `Relative.Strength.in.the.segment` is converted to a binary variable
data$Win <- ifelse(data$Relative.Strength.in.the.segment > threshold, 1, 0)
data$Win <- ifelse(data$Relative.Strength.in.the.segment > threshold, 1, 0)
data$Win <- ifelse(data$Relative.Strength.in.the.segment > 70, 1, 0)
data$Win <- ifelse(data$Relative.Strength.in.the.segment > 70, 1, 0)
# Fit a logistic regression model
model <- glm(Win ~ Sales.Value....Mn + Profit.. + Joint.Bid...WSES.Portion, data = data, family = binomial)
# Predict probabilities
predicted_probabilities <- predict(model, type = "response")
# Install and load pROC package
if (!require(pROC)) install.packages("pROC")
library(pROC)
# Calculate AUROC
roc_curve <- roc(data$Win, predicted_probabilities)
auc(roc_curve)
# Plot the ROC curve
plot(roc_curve, main = "ROC Curve")
# Define variables
n <- nrow(data)
TotalMarketingCosts <- sum(data$MarketingCost)
TotalPipelineValue <- sum(data$PipelineValue)
TotalExpectedSales <- sum(data$ExpectedSales)
TotalExpectedProfits <- sum(data$ExpectedProfits)
TotalFY15Revenues <- sum(data$FY15Revenues)
# Define the objective function coefficients (minimize marketing costs)
objective <- rep(1, n)
# Define the constraint matrix and the right-hand side of the constraints
constraints <- rbind(
data$MarketingCost,                      # Marketing costs
data$PipelineValue,                      # Pipeline value
data$ExpectedSales,                      # Expected sales
data$ExpectedProfits,                    # Expected profits
data$FY15Revenues,                       # FY15 revenues
data$SalesValue * 0.06                   # Marketing spend on opportunity
)
rhs <- c(
0.5 * TotalMarketingCosts,               # 50% of total marketing costs
0.5 * TotalPipelineValue,                # 50% of total pipeline value
0.5 * TotalExpectedSales,                # 50% of total expected sales
0.5 * TotalExpectedProfits,              # 50% of total expected profits
0.5 * TotalFY15Revenues,                 # 50% of total expected FY15 revenues
rep(0, n)                                # 6% of the sales value constraint
)
# Define the direction of the constraints
direction <- c("<=", ">=", ">=", ">=", ">=", "<=")
# Solve the LP problem
result <- lp(
"min",
objective,
constraints,
direction,
rhs,
all.int = FALSE
)
# Output the results
result
result <- lp(
"min",
objective,
constraints,
direction,
rhs,
all.int = FALSE
)
n <- nrow(data)
TotalMarketingCosts <- sum(data$MarketingCost)
TotalPipelineValue <- sum(data$PipelineValue)
TotalExpectedSales <- sum(data$ExpectedSales)
TotalExpectedProfits <- sum(data$ExpectedProfits)
TotalFY15Revenues <- sum(data$FY15Revenues)
objective <- rep(1, n)
constraints <- rbind(
data$MarketingCost,                      # Marketing costs
data$PipelineValue,                      # Pipeline value
data$ExpectedSales,                      # Expected sales
data$ExpectedProfits,                    # Expected profits
data$FY15Revenues,                       # FY15 revenues
data$SalesValue * 0.06                   # Marketing spend on opportunity
)
rhs <- c(
0.5 * TotalMarketingCosts,               # 50% of total marketing costs
0.5 * TotalPipelineValue,                # 50% of total pipeline value
0.5 * TotalExpectedSales,                # 50% of total expected sales
0.5 * TotalExpectedProfits,              # 50% of total expected profits
0.5 * TotalFY15Revenues,                 # 50% of total expected FY15 revenues
rep(0, n)                                # 6% of the sales value constraint
)
direction <- c("<=", ">=", ">=", ">=", ">=", "<=")
result <- lp(
"min",
objective,
constraints,
direction,
rhs,
all.int = FALSE
)
n <- nrow(data)
TotalMarketingCosts <- sum(data$MarketingCost)
TotalPipelineValue <- sum(data$PipelineValue)
TotalExpectedSales <- sum(data$ExpectedSales)
TotalExpectedProfits <- sum(data$ExpectedProfits)
TotalFY15Revenues <- sum(data$FY15Revenues)
objective <- rep(1, n)
constraints <- rbind(
data$MarketingCost,                      # Marketing costs
data$PipelineValue,                      # Pipeline value
data$ExpectedSales,                      # Expected sales
data$ExpectedProfits,                    # Expected profits
data$FY15Revenues,                       # FY15 revenues
data$SalesValue * 0.06                   # Marketing spend on opportunity
)
rhs <- c(
0.5 * TotalMarketingCosts,               # 50% of total marketing costs
0.5 * TotalPipelineValue,                # 50% of total pipeline value
0.5 * TotalExpectedSales,                # 50% of total expected sales
0.5 * TotalExpectedProfits,              # 50% of total expected profits
0.5 * TotalFY15Revenues,                 # 50% of total expected FY15 revenues
rep(0, n)                                # 6% of the sales value constraint
)
direction <- c("<=", ">=", ">=", ">=", ">=", "<=")
result <- lp(
"min",
objective,
constraints,
direction,
rhs,
all.int = FALSE
)
if (!require(lpSolve)) {
install.packages("lpSolve")
}
library(lpSolve)
data <- read.csv("VMS_data.csv")
data<-read.csv("VM_traindata.csv")
n <- nrow(data)
TotalMarketingCosts <- sum(data$MarketingCost)
TotalPipelineValue <- sum(data$PipelineValue)
TotalExpectedSales <- sum(data$ExpectedSales)
TotalExpectedProfits <- sum(data$ExpectedProfits)
TotalFY15Revenues <- sum(data$FY15Revenues)
objective <- data$MarketingCost
constraints <- rbind(
data$MarketingCost,                      # Marketing costs
data$PipelineValue,                      # Pipeline value
data$ExpectedSales,                      # Expected sales
data$ExpectedProfits,                    # Expected profits
data$FY15Revenues,                       # FY15 revenues
data$SalesValue * 0.06                   # Marketing spend on opportunity
)
rhs <- c(
0.5 * TotalMarketingCosts,               # 50% of total marketing costs
0.5 * TotalPipelineValue,                # 50% of total pipeline value
0.5 * TotalExpectedSales,                # 50% of total expected sales
0.5 * TotalExpectedProfits,              # 50% of total expected profits
0.5 * TotalFY15Revenues,                 # 50% of total expected FY15 revenues
rep(0, n)                                # Marketing spend constraints (inequality)
)
direction <- c("<=", ">=", ">=", ">=", ">=", rep("<=", n))
result <- lp(
"min",
objective,
constraints,
direction,
rhs,
all.int = FALSE
)
print(result$solution)
print(result$objval)
print(result$solution)
print(result$objval)
